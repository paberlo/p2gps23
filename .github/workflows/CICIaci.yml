name: CICDaci

on:
 # push:
 #   branches: [ master ]
  workflow_dispatch:



jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write # nuevo para CDeployment
      
  
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3 #descarga el repositorio en el ejecutor

      - name: Set up JDK 8
        uses: actions/setup-java@v3 
        with:
            java-version: '8'
            distribution: 'adopt'
            server-id: github 
            settings-path: ${{ github.workspace }} # location for the settings.xml file
  
        
      #### BUILDS ######
      - uses: gradle/gradle-build-action@v2.6.0 #la última versión de v2 usa cache y da problemas de dependencias con el build
        with:
          gradle-version: 2.1
               
      - name: build del Front
        working-directory: src/Clients
        run: ./gradlew build 
      - uses: actions/upload-artifact@v3 #guardar en Artifacts el resultado del build. No hace falta, es por curiosidad.
        with:
           name: Clients
           path: src/Clients/build/libs
    
      - name: build del Back
        working-directory: src/Backend/OrderService
        run: ./gradlew build test

      - name: dockerizar el front y el backend
        run: | 
            cp src/Clients/build/libs/*.war deploy/docker/Clients/drop #copiar el resultado del build para la nueva imagen
            docker build -t p2gps23/web deploy/docker/Clients
            cp src/Backend/OrderService/build/libs/ordering* deploy/docker/Order/drop #copiar el resultado del build para la nueva imagen
            docker build -t p2gps23/order deploy/docker/Order
            
      ### SUBIR IMAGENES A DOCKERHUB #####
      
      - name: Login to DockerHub
        uses: docker/login-action@v2 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }} # crear los secretos en Settings --> Secrets/Actions/New Repository Secret
          password: ${{ secrets.DOCKERHUB_PASSWORD }} 
      - name: Etiquetar con formato DockerHub
        run: |
          docker tag p2gps23/web ${{ secrets.DOCKERHUB_USERNAME }}/p2gps23:web
          docker tag p2gps23/order ${{ secrets.DOCKERHUB_USERNAME }}/p2gps23:order
      - name: Push a DockerHub
        run: |
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/p2gps23:order
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/p2gps23:web

       ### LOGIN EN AZURE
      - name: Log into Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true
          
       ### Desplegar nuestros contenedores   
      - name: Azure CLI script
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az webapp start --name p2gps --resource-group recursosGPS

    #  - name: Azure PowerShell script
     #   uses: azure/powershell@v1.2.0
     #   with:
     #     azPSVersion: "latest"
     #     inlineScript: |
     #       Get-AzContext
